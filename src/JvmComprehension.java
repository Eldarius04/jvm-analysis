
public class JvmComprehension {

    public static void main(String[] args) {
        // 1. В фрейме main() создается примитивная переменная i со значением 1
        //    Хранится непосредственно в стеке (не в хипе)
        int i = 1;                      // 1

        // 2. В хипе создается новый объект Object()
        //    В стеке (фрейм main()) создается ссылка 'o' на этот объект
        //    Объект становится под управление GC
        Object o = new Object();        // 2

        // 3. Автоупаковка: в хипе создается объект Integer со значением 2
        //    Ссылка 'ii' сохраняется в стеке (фрейм main())
        //    JVM может использовать кэшированный объект из пула (-128..127)
        Integer ii = 2;                 // 3

        // 4. Создается новый фрейм в стеке для printAll()
        //    Параметры передаются:
        //    - копия ссылки 'o' (на Object в хипе)
        //    - копия значения 'i' (1)
        //    - копия ссылки 'ii' (на Integer в хипе)
        printAll(o, i, ii);             // 4

        // 7. В хипе берется строка "finished" из пула строк (String Pool)
        //    Выводится через системный поток вывода
        System.out.println("finished"); // 7
    }

    private static void printAll(Object o, int i, Integer ii){
    // 5. В хипе создается новый объект Integer(700) (не кэшируется)
        //    В стеке (фрейм printAll()) создается ссылка 'uselessVar'
        //    После завершения метода объект станет доступен для GC
        Integer uselessVar = 700;                   // 5

        // 6. Цепочка вызовов:
        //    1) o.toString() - создает строковое представление Object в хипе
        //    2) Конкатенация создает новые объекты String в хипе
        //    3) Результат выводится через System.out
        System.out.println(o.toString() + i + ii);  // 6
    }
}
